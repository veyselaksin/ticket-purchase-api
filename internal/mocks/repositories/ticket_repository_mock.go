// Code generated by MockGen. DO NOT EDIT.
// Source: ticket-purchase/internal/db/repositories (interfaces: TicketRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/ticket_repository_mock.go -package=repositories ticket-purchase/internal/db/repositories TicketRepository
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"
	models "ticket-purchase/internal/db/models"

	gomock "go.uber.org/mock/gomock"
)

// MockTicketRepository is a mock of TicketRepository interface.
type MockTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketRepositoryMockRecorder
}

// MockTicketRepositoryMockRecorder is the mock recorder for MockTicketRepository.
type MockTicketRepositoryMockRecorder struct {
	mock *MockTicketRepository
}

// NewMockTicketRepository creates a new mock instance.
func NewMockTicketRepository(ctrl *gomock.Controller) *MockTicketRepository {
	mock := &MockTicketRepository{ctrl: ctrl}
	mock.recorder = &MockTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketRepository) EXPECT() *MockTicketRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTicketRepository) Create(arg0 context.Context, arg1 *models.Ticket) (*models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTicketRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTicketRepository)(nil).Create), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockTicketRepository) FindAll(arg0 context.Context) ([]models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTicketRepositoryMockRecorder) FindAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTicketRepository)(nil).FindAll), arg0)
}

// FindById mocks base method.
func (m *MockTicketRepository) FindById(arg0 context.Context, arg1 string) (*models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0, arg1)
	ret0, _ := ret[0].(*models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTicketRepositoryMockRecorder) FindById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTicketRepository)(nil).FindById), arg0, arg1)
}

// Update mocks base method.
func (m *MockTicketRepository) Update(arg0 context.Context, arg1 *models.Ticket) (*models.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*models.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTicketRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTicketRepository)(nil).Update), arg0, arg1)
}
