// Code generated by MockGen. DO NOT EDIT.
// Source: ticket-purchase/internal/db/repositories (interfaces: PurchaseRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/repositories/purchase_repository_mock.go -package=repositories ticket-purchase/internal/db/repositories PurchaseRepository
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"
	models "ticket-purchase/internal/db/models"

	gomock "go.uber.org/mock/gomock"
)

// MockPurchaseRepository is a mock of PurchaseRepository interface.
type MockPurchaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseRepositoryMockRecorder
}

// MockPurchaseRepositoryMockRecorder is the mock recorder for MockPurchaseRepository.
type MockPurchaseRepositoryMockRecorder struct {
	mock *MockPurchaseRepository
}

// NewMockPurchaseRepository creates a new mock instance.
func NewMockPurchaseRepository(ctrl *gomock.Controller) *MockPurchaseRepository {
	mock := &MockPurchaseRepository{ctrl: ctrl}
	mock.recorder = &MockPurchaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseRepository) EXPECT() *MockPurchaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPurchaseRepository) Create(arg0 context.Context, arg1 *models.Purchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPurchaseRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPurchaseRepository)(nil).Create), arg0, arg1)
}
